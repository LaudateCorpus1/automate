// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: external/user_settings/user_settings.proto

package user_settings

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	request "github.com/chef/automate/api/external/user_settings/request"
	response "github.com/chef/automate/api/external/user_settings/response"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_external_user_settings_user_settings_proto protoreflect.FileDescriptor

var file_external_user_settings_user_settings_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe6, 0x03, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xde, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x15, 0x0a, 0x13,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x19, 0x12, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x3a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x67, 0x65, 0x74,
	0x12, 0xed, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x15, 0x0a, 0x13, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x8a, 0xb5, 0x18, 0x1c, 0x12, 0x1a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x3a, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_external_user_settings_user_settings_proto_goTypes = []interface{}{
	(*request.GetUserSettingsRequest)(nil),      // 0: chef.automate.api.user_settings.GetUserSettingsRequest
	(*request.UpdateUserSettingsRequest)(nil),   // 1: chef.automate.api.user_settings.UpdateUserSettingsRequest
	(*response.GetUserSettingsResponse)(nil),    // 2: chef.automate.api.user_settings.GetUserSettingsResponse
	(*response.UpdateUserSettingsResponse)(nil), // 3: chef.automate.api.user_settings.UpdateUserSettingsResponse
}
var file_external_user_settings_user_settings_proto_depIdxs = []int32{
	0, // 0: chef.automate.api.user_settings.UserSettingsService.GetUserSettings:input_type -> chef.automate.api.user_settings.GetUserSettingsRequest
	1, // 1: chef.automate.api.user_settings.UserSettingsService.UpdateUserSettings:input_type -> chef.automate.api.user_settings.UpdateUserSettingsRequest
	2, // 2: chef.automate.api.user_settings.UserSettingsService.GetUserSettings:output_type -> chef.automate.api.user_settings.GetUserSettingsResponse
	3, // 3: chef.automate.api.user_settings.UserSettingsService.UpdateUserSettings:output_type -> chef.automate.api.user_settings.UpdateUserSettingsResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_external_user_settings_user_settings_proto_init() }
func file_external_user_settings_user_settings_proto_init() {
	if File_external_user_settings_user_settings_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_user_settings_user_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_user_settings_user_settings_proto_goTypes,
		DependencyIndexes: file_external_user_settings_user_settings_proto_depIdxs,
	}.Build()
	File_external_user_settings_user_settings_proto = out.File
	file_external_user_settings_user_settings_proto_rawDesc = nil
	file_external_user_settings_user_settings_proto_goTypes = nil
	file_external_user_settings_user_settings_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserSettingsServiceClient is the client API for UserSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSettingsServiceClient interface {
	// GetUserSettings returns the aggregate status across all data lifecycle jobs
	GetUserSettings(ctx context.Context, in *request.GetUserSettingsRequest, opts ...grpc.CallOption) (*response.GetUserSettingsResponse, error)
	// UpdateUserSettings provides a singular endpoint for configuring all data lifecycle jobs
	UpdateUserSettings(ctx context.Context, in *request.UpdateUserSettingsRequest, opts ...grpc.CallOption) (*response.UpdateUserSettingsResponse, error)
}

type userSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSettingsServiceClient(cc grpc.ClientConnInterface) UserSettingsServiceClient {
	return &userSettingsServiceClient{cc}
}

func (c *userSettingsServiceClient) GetUserSettings(ctx context.Context, in *request.GetUserSettingsRequest, opts ...grpc.CallOption) (*response.GetUserSettingsResponse, error) {
	out := new(response.GetUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.user_settings.UserSettingsService/GetUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSettingsServiceClient) UpdateUserSettings(ctx context.Context, in *request.UpdateUserSettingsRequest, opts ...grpc.CallOption) (*response.UpdateUserSettingsResponse, error) {
	out := new(response.UpdateUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.user_settings.UserSettingsService/UpdateUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSettingsServiceServer is the server API for UserSettingsService service.
type UserSettingsServiceServer interface {
	// GetUserSettings returns the aggregate status across all data lifecycle jobs
	GetUserSettings(context.Context, *request.GetUserSettingsRequest) (*response.GetUserSettingsResponse, error)
	// UpdateUserSettings provides a singular endpoint for configuring all data lifecycle jobs
	UpdateUserSettings(context.Context, *request.UpdateUserSettingsRequest) (*response.UpdateUserSettingsResponse, error)
}

// UnimplementedUserSettingsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserSettingsServiceServer struct {
}

func (*UnimplementedUserSettingsServiceServer) GetUserSettings(context.Context, *request.GetUserSettingsRequest) (*response.GetUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettings not implemented")
}
func (*UnimplementedUserSettingsServiceServer) UpdateUserSettings(context.Context, *request.UpdateUserSettingsRequest) (*response.UpdateUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSettings not implemented")
}

func RegisterUserSettingsServiceServer(s *grpc.Server, srv UserSettingsServiceServer) {
	s.RegisterService(&_UserSettingsService_serviceDesc, srv)
}

func _UserSettingsService_GetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSettingsServiceServer).GetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.user_settings.UserSettingsService/GetUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSettingsServiceServer).GetUserSettings(ctx, req.(*request.GetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSettingsService_UpdateUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSettingsServiceServer).UpdateUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.user_settings.UserSettingsService/UpdateUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSettingsServiceServer).UpdateUserSettings(ctx, req.(*request.UpdateUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSettingsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.user_settings.UserSettingsService",
	HandlerType: (*UserSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSettings",
			Handler:    _UserSettingsService_GetUserSettings_Handler,
		},
		{
			MethodName: "UpdateUserSettings",
			Handler:    _UserSettingsService_UpdateUserSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/user_settings/user_settings.proto",
}
